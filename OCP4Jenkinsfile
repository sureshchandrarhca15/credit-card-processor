def myRepo, gitCommit, gitBranch, shortGitCommit, previousGitCommit
pipeline {
  agent { label 'maven' }
  stages
  {
	stage('Checkout') 
	{
	steps
	{
	script
	{
	try
	{
		myRepo = checkout scm
		gitCommit = myRepo.GIT_COMMIT
		gitBranch = myRepo.GIT_BRANCH
		shortGitCommit = "${gitCommit[0..10]}"
		previousGitCommit = sh(script: "git rev-parse ${gitCommit}~", returnStdout: true)
	}
	catch(Exception e)
	{
		println "ERROR => Code Checkout failed, exiting..."
		throw e
	}
	}
	}
	}
	stage('Build')
	{
	steps
	{
	script
	{
	try
	{
		sh """
		mvn clean install -Dmaven.test.skip=true
		"""
    }
	catch (Exception e) {
		println "Failed to Maven Build - ${currentBuild.fullDisplayName}"
		throw e
	}
	}
	}
	}
	stage('Unit Test')
	{
	steps
	{
	script
	{	
	try
	{
		sh """
		mvn test -Dmaven.test.skip=true
		"""
    }
	catch (Exception e) 
	{
		println "Failed to Run Unit Test - ${currentBuild.fullDisplayName}"
		throw e
	}
	}
	}
	}
	stage('Sonar Analysis')
	{
	steps
	{
	script
	{	
	try
	{
		withSonarQubeEnv('sonarqube_7_5') {
        sh """ 
	    mvn -DBranch=${gitBranch} -Dsonar.branch=${gitBranch} -e -B sonar:sonar
	    sh """
        }
	}
	catch (Exception e) 
	{
		println "Failed to Run Sonar Analysis - ${currentBuild.fullDisplayName}"
		throw e
	}
	}
	}
	}
	stage('Quality Gate')
	{
	steps
	{
	script
	{	
	try
	{
		withSonarQubeEnv('sonarqube_7_5') {
        timeout(time: 1, unit: 'HOURS') {
        def qg = waitForQualityGate()
        if (qg.status != 'OK' && qg.status != 'WARN') {
            error "Pipeline aborted due to quality gate failure: ${qg.status}"
        }
        }
        }
	}
	catch (Exception e)
	{
		println "Failed to Test Quality Gate  - ${currentBuild.fullDisplayName}"
		throw e
	}
	}
	}
	}
	stage('Create Image Builder') {
      when {
        expression {
          openshift.withCluster() {
            return !openshift.selector("bc", "ccapp").exists();
          }
        }
      }
      steps {
        script {
          openshift.withCluster() {
            openshift.newBuild("--name=ccapp", "--image-stream=redhat-openjdk18-openshift:1.1", "--binary")
          }
        }
      }
    }
    stage('Build Image') {
      steps {
        script {
          openshift.withCluster() {
            openshift.selector("bc", "ccapp").startBuild("--from-file=target/Credit-Card-Processor-0.0.1-SNAPSHOT.jar", "--wait")
          }
        }
      }
    }

}
}
			